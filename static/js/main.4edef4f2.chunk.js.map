{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","addressContent","useState","location","setLocation","addressInput","useRef","className","src","alt","InputGroup","FormControl","placeholder","aria-label","aria-describedby","id","ref","Append","Button","variant","onClick","click","current","value","length","fetch","encodeURIComponent","then","res","json","result","lat","lon","error","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAAe,I,mCCiEAA,MA3Df,WAAgB,IAIRC,EAJO,EACqBC,mBAAS,MAD9B,mBACJC,EADI,KACMC,EADN,KAELC,EAAeC,iBAAO,MAkB5B,OAdIL,EADY,MAAZE,EACiB,2CAEb,+BACI,uCAAUA,EAAS,MACnB,uCAAUA,EAAS,YAKV,qEAMjB,qBAAKI,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKC,IAAI,uEAAuED,UAAU,WAAWE,IAAI,SACzG,8BACI,eAACC,EAAA,EAAD,CAAYH,UAAU,OAAtB,UACI,cAACI,EAAA,EAAD,CACIC,YAAY,gBACZC,aAAW,gBACXC,mBAAiB,eACjBC,GAAG,eACHC,IAAKX,IAET,cAACK,EAAA,EAAWO,OAAZ,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAC9B,SAACC,GACOhB,EAAaiB,QAAQC,MAAMC,OAAS,GACpCC,MAAM,sFAAD,OAAuFC,mBAAmBrB,EAAaiB,QAAQC,OAA/H,iBACAI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG1B,EAAY,CAAC0B,EAAO,GAAGC,IAAKD,EAAO,GAAGE,SAE1C,SAACC,GACGC,QAAQC,IAAIF,OAVpC,2BAmBXhC,QC/CFmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4edef4f2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport {Button, FormControl, InputGroup} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {useRef, useState} from \"react\";\n\nfunction App() {\n    const [location, setLocation] = useState(null);\n    const addressInput = useRef(null);\n\n    var addressContent;\n    if (location != null) {\n        addressContent = <div>\n            Address:\n            <ul>\n                <li>Lat: {location[0]}</li>\n                <li>Lon: {location[1]}</li>\n            </ul>\n        </div>\n\n    } else {\n        addressContent = <div>\n            Proszę podaj swój adres...\n        </div>\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/3/37/Solar_Panels.jpg\" className=\"App-logo\" alt=\"logo\"/>\n                <div>\n                    <InputGroup className=\"mb-3\">\n                        <FormControl\n                            placeholder=\"Twój Adres\"\n                            aria-label=\"Twój Adres\"\n                            aria-describedby=\"basic-addon2\"\n                            id=\"addressInput\"\n                            ref={addressInput}\n                        />\n                        <InputGroup.Append>\n                            <Button variant=\"outline-primary\" onClick={\n                                (click) => {\n                                    if (addressInput.current.value.length > 0) {\n                                        fetch(`https://eu1.locationiq.com/v1/search.php?key=pk.7b5ef7afb5ebab795d1d41722b9c4f08&q=${encodeURIComponent(addressInput.current.value)}&format=json`)\n                                            .then(res => res.json())\n                                            .then(\n                                                (result) => {\n                                                    setLocation([result[0].lat, result[0].lon])\n                                                },\n                                                (error) => {\n                                                    console.log(error);\n                                                }\n                                            )\n                                    }\n                                }\n                            }>Oblicz</Button>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </div>\n                {addressContent}\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}